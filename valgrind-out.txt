==3692== Memcheck, a memory error detector
==3692== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3692== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==3692== Command: ./itd
==3692== Parent PID: 3116
==3692== 
--3692-- 
--3692-- Valgrind options:
--3692--    --leak-check=full
--3692--    --show-leak-kinds=all
--3692--    --track-origins=yes
--3692--    --verbose
--3692--    --log-file=valgrind-out.txt
--3692-- Contents of /proc/version:
--3692--   Linux version 4.15.0-46-generic (buildd@lgw01-amd64-038) (gcc version 7.3.0 (Ubuntu 7.3.0-16ubuntu3)) #49-Ubuntu SMP Wed Feb 6 09:33:07 UTC 2019
--3692-- 
--3692-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-avx-avx2-bmi
--3692-- Page sizes: currently 4096, max supported 4096
--3692-- Valgrind library directory: /usr/lib/valgrind
--3692-- Reading syms from /home/monica/Documents/IMAC_Tower_Defense/itd
--3692-- Reading syms from /lib/x86_64-linux-gnu/ld-2.27.so
--3692--   Considering /lib/x86_64-linux-gnu/ld-2.27.so ..
--3692--   .. CRC mismatch (computed 1b7c895e wanted 2943108a)
--3692--   Considering /usr/lib/debug/lib/x86_64-linux-gnu/ld-2.27.so ..
--3692--   .. CRC is valid
--3692-- Reading syms from /usr/lib/valgrind/memcheck-amd64-linux
--3692--   Considering /usr/lib/valgrind/memcheck-amd64-linux ..
--3692--   .. CRC mismatch (computed c25f395c wanted 0a9602a8)
--3692--    object doesn't have a symbol table
--3692--    object doesn't have a dynamic symbol table
--3692-- Scheduler: using generic scheduler lock implementation.
--3692-- Reading suppressions file: /usr/lib/valgrind/default.supp
==3692== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-3692-by-monica-on-???
==3692== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-3692-by-monica-on-???
==3692== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-3692-by-monica-on-???
==3692== 
==3692== TO CONTROL THIS PROCESS USING vgdb (which you probably
==3692== don't want to do, unless you know exactly what you're doing,
==3692== or are doing some strange experiment):
==3692==   /usr/lib/valgrind/../../bin/vgdb --pid=3692 ...command...
==3692== 
==3692== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==3692==   /path/to/gdb ./itd
==3692== and then give GDB the following command
==3692==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=3692
==3692== --pid is optional if only one valgrind process is running
==3692== 
--3692-- REDIR: 0x401f2f0 (ld-linux-x86-64.so.2:strlen) redirected to 0x58060901 (???)
--3692-- REDIR: 0x401f0d0 (ld-linux-x86-64.so.2:index) redirected to 0x5806091b (???)
--3692-- Reading syms from /usr/lib/valgrind/vgpreload_core-amd64-linux.so
--3692--   Considering /usr/lib/valgrind/vgpreload_core-amd64-linux.so ..
--3692--   .. CRC mismatch (computed 4b63d83e wanted 670599e6)
--3692--    object doesn't have a symbol table
--3692-- Reading syms from /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so
--3692--   Considering /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so ..
--3692--   .. CRC mismatch (computed a4b37bee wanted 8ad4dc94)
--3692--    object doesn't have a symbol table
==3692== WARNING: new redirection conflicts with existing -- ignoring it
--3692--     old: 0x0401f2f0 (strlen              ) R-> (0000.0) 0x58060901 ???
--3692--     new: 0x0401f2f0 (strlen              ) R-> (2007.0) 0x04c32db0 strlen
--3692-- REDIR: 0x401d360 (ld-linux-x86-64.so.2:strcmp) redirected to 0x4c33ee0 (strcmp)
--3692-- REDIR: 0x401f830 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x4c374f0 (mempcpy)
--3692-- Reading syms from /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25
--3692--    object doesn't have a symbol table
--3692-- Reading syms from /lib/x86_64-linux-gnu/libgcc_s.so.1
--3692--    object doesn't have a symbol table
--3692-- Reading syms from /lib/x86_64-linux-gnu/libc-2.27.so
--3692--   Considering /lib/x86_64-linux-gnu/libc-2.27.so ..
--3692--   .. CRC mismatch (computed b1c74187 wanted 042cc048)
--3692--   Considering /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.27.so ..
--3692--   .. CRC is valid
--3692-- Reading syms from /lib/x86_64-linux-gnu/libm-2.27.so
--3692--   Considering /lib/x86_64-linux-gnu/libm-2.27.so ..
--3692--   .. CRC mismatch (computed 7feae033 wanted b29b2508)
--3692--   Considering /usr/lib/debug/lib/x86_64-linux-gnu/libm-2.27.so ..
--3692--   .. CRC is valid
--3692-- REDIR: 0x547bc70 (libc.so.6:memmove) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x547ad40 (libc.so.6:strncpy) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x547bf50 (libc.so.6:strcasecmp) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x547a790 (libc.so.6:strcat) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x547ad70 (libc.so.6:rindex) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x547d7c0 (libc.so.6:rawmemchr) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x547bde0 (libc.so.6:mempcpy) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x547bc10 (libc.so.6:bcmp) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x547ad00 (libc.so.6:strncmp) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x547a800 (libc.so.6:strcmp) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x547bd40 (libc.so.6:memset) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x54990f0 (libc.so.6:wcschr) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x547aca0 (libc.so.6:strnlen) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x547a870 (libc.so.6:strcspn) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x547bfa0 (libc.so.6:strncasecmp) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x547a840 (libc.so.6:strcpy) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x547c0e0 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x547ada0 (libc.so.6:strpbrk) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x547a7c0 (libc.so.6:index) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x547ac70 (libc.so.6:strlen) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x54856c0 (libc.so.6:memrchr) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x547bff0 (libc.so.6:strcasecmp_l) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x547bbe0 (libc.so.6:memchr) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x5499eb0 (libc.so.6:wcslen) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x547b050 (libc.so.6:strspn) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x547bf20 (libc.so.6:stpncpy) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x547bef0 (libc.so.6:stpcpy) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x547d7f0 (libc.so.6:strchrnul) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x547c040 (libc.so.6:strncasecmp_l) redirected to 0x4a2a6e0 (_vgnU_ifunc_wrapper)
--3692-- REDIR: 0x556b3c0 (libc.so.6:__strrchr_avx2) redirected to 0x4c32730 (rindex)
--3692-- REDIR: 0x5474070 (libc.so.6:malloc) redirected to 0x4c2faa0 (malloc)
--3692-- REDIR: 0x556b590 (libc.so.6:__strlen_avx2) redirected to 0x4c32cf0 (strlen)
--3692-- REDIR: 0x5567ba0 (libc.so.6:__memcmp_avx2_movbe) redirected to 0x4c35e00 (bcmp)
--3692-- REDIR: 0x5546d60 (libc.so.6:__strcmp_ssse3) redirected to 0x4c33da0 (strcmp)
--3692-- REDIR: 0x547b590 (libc.so.6:__GI_strstr) redirected to 0x4c37760 (__strstr_sse2)
--3692-- REDIR: 0x4ecf240 (libstdc++.so.6:operator new[](unsigned long)) redirected to 0x4c30830 (operator new[](unsigned long))
--3692-- REDIR: 0x5567420 (libc.so.6:__memchr_avx2) redirected to 0x4c33f80 (memchr)
--3692-- REDIR: 0x556bad0 (libc.so.6:__memcpy_avx_unaligned_erms) redirected to 0x4c366e0 (memmove)
--3692-- REDIR: 0x556bab0 (libc.so.6:__mempcpy_avx_unaligned_erms) redirected to 0x4c37130 (mempcpy)
--3692-- REDIR: 0x4ecf190 (libstdc++.so.6:operator new(unsigned long)) redirected to 0x4c30110 (operator new(unsigned long))
--3692-- REDIR: 0x4ecd310 (libstdc++.so.6:operator delete[](void*)) redirected to 0x4c316d0 (operator delete[](void*))
--3692-- REDIR: 0x5474950 (libc.so.6:free) redirected to 0x4c30cd0 (free)
--3692-- REDIR: 0x4ecd2e0 (libstdc++.so.6:operator delete(void*)) redirected to 0x4c311d0 (operator delete(void*))
==3692== Invalid write of size 8
==3692==    at 0x10ACBC: Graph::add_node(Node) (in /home/monica/Documents/IMAC_Tower_Defense/itd)
==3692==    by 0x10B4AE: create_graph() (in /home/monica/Documents/IMAC_Tower_Defense/itd)
==3692==    by 0x10A8AA: main (in /home/monica/Documents/IMAC_Tower_Defense/itd)
==3692==  Address 0x5b80820 is 0 bytes after a block of size 208 alloc'd
==3692==    at 0x4C3089F: operator new[](unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==3692==    by 0x10ABF9: Graph::Graph(int) (in /home/monica/Documents/IMAC_Tower_Defense/itd)
==3692==    by 0x10B461: create_graph() (in /home/monica/Documents/IMAC_Tower_Defense/itd)
==3692==    by 0x10A8AA: main (in /home/monica/Documents/IMAC_Tower_Defense/itd)
==3692== 
==3692== Invalid write of size 8
==3692==    at 0x10ACBF: Graph::add_node(Node) (in /home/monica/Documents/IMAC_Tower_Defense/itd)
==3692==    by 0x10B4AE: create_graph() (in /home/monica/Documents/IMAC_Tower_Defense/itd)
==3692==    by 0x10A8AA: main (in /home/monica/Documents/IMAC_Tower_Defense/itd)
==3692==  Address 0x5b80828 is 8 bytes after a block of size 208 alloc'd
==3692==    at 0x4C3089F: operator new[](unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==3692==    by 0x10ABF9: Graph::Graph(int) (in /home/monica/Documents/IMAC_Tower_Defense/itd)
==3692==    by 0x10B461: create_graph() (in /home/monica/Documents/IMAC_Tower_Defense/itd)
==3692==    by 0x10A8AA: main (in /home/monica/Documents/IMAC_Tower_Defense/itd)
==3692== 
==3692== Invalid write of size 8
==3692==    at 0x10ACCB: Graph::add_node(Node) (in /home/monica/Documents/IMAC_Tower_Defense/itd)
==3692==    by 0x10B4AE: create_graph() (in /home/monica/Documents/IMAC_Tower_Defense/itd)
==3692==    by 0x10A8AA: main (in /home/monica/Documents/IMAC_Tower_Defense/itd)
==3692==  Address 0x5b80830 is 16 bytes after a block of size 208 alloc'd
==3692==    at 0x4C3089F: operator new[](unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==3692==    by 0x10ABF9: Graph::Graph(int) (in /home/monica/Documents/IMAC_Tower_Defense/itd)
==3692==    by 0x10B461: create_graph() (in /home/monica/Documents/IMAC_Tower_Defense/itd)
==3692==    by 0x10A8AA: main (in /home/monica/Documents/IMAC_Tower_Defense/itd)
==3692== 
==3692== Invalid write of size 8
==3692==    at 0x10ACCF: Graph::add_node(Node) (in /home/monica/Documents/IMAC_Tower_Defense/itd)
==3692==    by 0x10B4AE: create_graph() (in /home/monica/Documents/IMAC_Tower_Defense/itd)
==3692==    by 0x10A8AA: main (in /home/monica/Documents/IMAC_Tower_Defense/itd)
==3692==  Address 0x5b80838 is 24 bytes after a block of size 208 in arena "client"
==3692== 

valgrind: m_mallocfree.c:307 (get_bszB_as_is): Assertion 'bszB_lo == bszB_hi' failed.
valgrind: Heap block lo/hi size mismatch: lo = 272, hi = 95945688.
This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==3692==    at 0x580441BA: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==3692==    by 0x580442D4: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==3692==    by 0x58044459: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==3692==    by 0x58052FC0: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==3692==    by 0x5803CECA: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==3692==    by 0x5803B5D3: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==3692==    by 0x5803FC9D: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==3692==    by 0x5803A8CB: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==3692==    by 0x1008E6DC3E: ???
==3692==    by 0x1008CA9F2F: ???
==3692==    by 0x1C0F: ???
==3692==    by 0x100200859F: ???
==3692==    by 0x1008CA9F17: ???
==3692==    by 0x1008CA9F2F: ???
==3692==    by 0x5946EB1F: ???
==3692==    by 0x600: ???
==3692==    by 0xDA7D: ???

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 3692)
==3692==    at 0x10ACD7: Graph::add_node(Node) (in /home/monica/Documents/IMAC_Tower_Defense/itd)
==3692==    by 0x10B4AE: create_graph() (in /home/monica/Documents/IMAC_Tower_Defense/itd)
==3692==    by 0x10A8AA: main (in /home/monica/Documents/IMAC_Tower_Defense/itd)


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

